{"version":3,"sources":["logo.svg","images/banana.jpg","images/pizza.jpg","images/broccoli.png","images/burger.jpg","components/Title/index.js","components/Scoreboard/index.js","components/Card/index.js","data/all-cards.js","components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Title","react_default","a","createElement","src","logo","alt","className","Component","Scoreboard","this","props","score","highScore","React","Card","clickFunction","_this","cardClick","id","console","log","onClick","img","all_cards","imageUrl","banana","visited","pizza","broccoli","burger","Game","state","allMemoryCards","allCards","forEach","card","thisCardVisited","setState","shuffledCards","_","shuffle","newScore","newMemoryCards","map","shuffledMemoryCards","_this2","src_components_Scoreboard","src_components_Card","key","App","src_components_Title","src_components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50d1f54d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/banana.54627a66.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pizza.407aa0dc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/broccoli.cf340039.png\";","module.exports = __webpack_public_path__ + \"static/media/burger.f3f3e68b.jpg\";","import React, { Component } from 'react';\r\nimport logo from '../../logo.svg';\r\nimport './index.css';\r\n\r\nclass Title extends Component {\r\n  render () {\r\n\r\n    return (\r\n\r\n      <h1>\r\n        <span>Memory Game</span>\r\n        <img src={logo} alt=\"React logo\" className=\"logo\"></img>\r\n      </h1>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Title;\r\n\r\n// change logo color. Import as svg and then can change color","import React from 'react';\r\nimport './index.css';\r\n\r\nclass Scoreboard extends React.Component {\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <h4>\r\n          Scoreboard\r\n        </h4>\r\n        <h4> Score = {this.props.score} </h4>\r\n        <h4>High score = {this.props.highScore}</h4>\r\n      </div>\r\n      \r\n    )\r\n  }\r\n}\r\n\r\nexport default Scoreboard;\r\n\r\n","import React from 'react';\r\nimport './index.css';\r\n\r\nclass Card extends React.Component {\r\n\r\n  clickFunction = () => {\r\n    this.props.cardClick(this.props.id)\r\n  }\r\n  render() {\r\n    console.log(\"Setting up card \" + this.props.id);\r\n    return (\r\n      <div onClick ={this.clickFunction} className=\"memoryCard\">\r\n        <h4>\r\n          Card Number {this.props.id}\r\n        </h4>\r\n        <img src={this.props.img}  alt=\"card\"></img>\r\n      </div>\r\n      \r\n    )\r\n  }\r\n}\r\n\r\nexport default Card;\r\n\r\n","import banana from \"../images/banana.jpg\";\r\nimport pizza from \"../images/pizza.jpg\";\r\nimport broccoli from \"../images/broccoli.png\";\r\nimport burger from \"../images/burger.jpg\";\r\n\r\n// data for cards\r\nexport default [\r\n  {\r\n    id: 1,\r\n    imageUrl: banana,\r\n    visited: false\r\n  },\r\n  {\r\n    id: 2,\r\n    imageUrl: pizza,\r\n    visited: false\r\n  },\r\n  {\r\n    id: 3,\r\n    imageUrl: broccoli,\r\n    visited: false\r\n  },\r\n  {\r\n    id: 4,\r\n    imageUrl: burger,\r\n    visited: false\r\n  }\r\n]\r\n\r\n","import React from 'react';\r\nimport './index.css';\r\nimport Scoreboard from \"../Scoreboard\";\r\nimport Card from \"../Card\";\r\nimport allCards from \"../../data/all-cards\";\r\nimport _ from \"lodash\";\r\n\r\n\r\nclass Game extends React.Component {\r\n  state = {\r\n    score: 0,\r\n    highScore: 0,\r\n    allMemoryCards: allCards\r\n    // shuffledMemoryCards: allCards\r\n  }\r\n\r\n  cardClick = (id) => {\r\n    // debug\r\n    console.log(\"Clicked card \" + id);\r\n    this.state.allMemoryCards.forEach( (card) => {\r\n      console.log(\"Card \" + card.id + \" visited \" + card.visited);\r\n    });\r\n    // memory cards always appear in a random order, so have to run through them all\r\n    // to find out if this card was already visited\r\n    let thisCardVisited = false;\r\n    this.state.allMemoryCards.forEach((card) => {\r\n      if (card.id === id) {\r\n        if ( card.visited) {\r\n          thisCardVisited = true;\r\n        }\r\n      }\r\n    });\r\n    if (thisCardVisited ) {\r\n      console.log(\"Already clicked, reset game\");\r\n      // reset everything\r\n      this.setState( { score:0});\r\n      // this.setState({ allMemoryCards: allCards}); // clears all the 'visited' fields\r\n      // lodash .shuffle re-arranges array in random order\r\n      // using 'allCards' sets back to original array\r\n      let shuffledCards = _.shuffle(allCards);\r\n      this.setState( { allMemoryCards: shuffledCards});\r\n\r\n    } \r\n    else {\r\n      // change score and set visited on the clicked cards\r\n      // increase score and check against highScore\r\n      let newScore = this.state.score + 1;\r\n      if (newScore > this.state.highScore) {\r\n        this.setState({ highScore: newScore});\r\n      }\r\n      this.setState({score: newScore});\r\n\r\n      // have to create a new array to change allMemoryCards, even if only changed one thing\r\n      let newMemoryCards = this.state.allMemoryCards.map( (card) => {\r\n        if (card.id === id) {\r\n          return { \r\n            id: card.id,\r\n            imageUrl: card.imageUrl,\r\n            visited: true\r\n          }\r\n        }\r\n        else {\r\n          return card;\r\n        }\r\n      });\r\n      let shuffledMemoryCards = _.shuffle(newMemoryCards);\r\n      this.setState({ allMemoryCards: shuffledMemoryCards });\r\n    }\r\n    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Scoreboard score={this.state.score} highScore={this.state.highScore} />\r\n        <div className=\"cardTable\">\r\n          {this.state.allMemoryCards.map( (card) => {\r\n            return (\r\n              <Card   \r\n                className=\"card\" \r\n                img={card.imageUrl} \r\n                id={card.id} \r\n                key={card.id}\r\n                cardClick={this.cardClick} \r\n              />\r\n            );\r\n\r\n          })}\r\n        </div>\r\n      </div> \r\n    )\r\n  }\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport Title from \"./components/Title\";\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return (\n    <div>\n      <Title />\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}